/////DUAL DECISION VARIABLES for EXTREME RAY PROBLEM/////

		//Alpha[t] - Defined for each 't' in T.
		IloNumVarArray AlphaEr(env, T, 0, IloInfinity, ILOFLOAT);
		IloNumArray AlphaEr_eval(env, T);


		//Beta[t][i] - Defined for each 'i' in Nc and each 't' in T.
		VarArray2D BetaEr(env, T);
		Array2D BetaEr_val(env, T);

		for (int i = 0; i < T; i++) {
			BetaEr[i] = IloNumVarArray(env, N, 0, IloInfinity, ILOFLOAT);  // For values from 1 to N, ie only customer locations.
			BetaEr_val[i] = IloNumArray(env, N);
		}


		//Gama[t] - Defined for 't' in T.
		IloNumVarArray GammaEr(env, T, 0, IloInfinity, ILOFLOAT);
		IloNumArray GammaEr_val(env, T);


		//Theta - Defined for each 'i' in Nc and each 't' in T.
		VarArray2D ThetaEr(env, T);
		Array2D ThetaEr_val(env, T);

		for (int i = 0; i < T; i++) {
			ThetaEr[i] = IloNumVarArray(env, N, 0, IloInfinity, ILOFLOAT);  // For values from 1 to N, ie only customer locations.
			ThetaEr_val[i] = IloNumArray(env, N);
		}

		//Delta - Defined for 't' in T.
		IloNumVarArray DeltaEr(env, T, 0, IloInfinity, ILOFLOAT);
		IloNumArray DeltaEr_val(env, T);


		//Kappa - Defined for each 'k' in K and each 't' in T.
		VarArray2D KappaEr(env, T);
		Array2D KappaEr_val(env, T);

		for (int i = 0; i < T; i++) {
			KappaEr[i] = IloNumVarArray(env, K, 0, IloInfinity, ILOFLOAT);
			KappaEr_val[i] = IloNumArray(env, K);
		}


		//Zeta - Defined for each 'i' in Nc, for each 'k' in K and each 't' in T.
		VarArray3D ZetaEr(env, T);  // Defining 3D array of decision variables corresponding to each time period.
		Array3D ZetaEr_val(env, T);  // To store Zeta values in a 3D Array.

		for (int i = 0; i < T; i++) {
			ZetaEr[i] = VarArray2D(env, K);  // Decision variables corresponding to each vehicle.
			ZetaEr_val[i] = Array2D(env, K);  // To store Z[i] values.

			for (int j = 0; j < K; j++) {
				ZetaEr[i][j] = IloNumVarArray(env, N, 0, IloInfinity, ILOFLOAT);  // Decision variables corresponding to each customer locations, hence N = 1 to n.
				ZetaEr_val[i][j] = IloNumArray(env, N);
			}
		}







		/////EXTREME RAY PROBLEM (DUAL FORMULATION)/////
		IloModel model_sub_er(env);
		IloObjective Objective_sub_er = IloMaximize(env);
		model_sub_er.add(Objective_sub_er);


		// Refer Inequality 43 - Supplementary material
		///Constraint 1 - for {t in 1..T}: Alpha[t] - Delta[t] <= u;
		for (int t = 0; t < T; t++) {
			model_sub_er.add(AlphaEr[t] - DeltaEr[t] <= 0);
		}


		// Refer Inequality 44 - Supplementary material
		///Constraint 2 - for {t in 1..T}: -Alpha[t] + Alpha[t+1] - Gamma[t+1] <= holding cost of plant;
		// Loop till T-1, because t+1 at the end will be undefined - To check why they have taken like this?
		for (int t = 0; t < T - 1; t++) {
			model_sub_er.add(-AlphaEr[t] + AlphaEr[t + 1] - GammaEr[t + 1] <= 0);
		}


		// Refer Inequality 45 - Supplementary material
		///Constraint 3 - for {i in Nc} for {t in T}: -Beta[i][t] + Beta[i][t+1] - Theta[i][t] <= holding cost[i].
		// Loop till T-1, because t+1 at the end will be undefined - To check why they have taken like this?
		for (int t = 0; t < T - 1; t++) {
			for (int i = 1; i < N; i++) {
				model_sub_er.add(-BetaEr[t][i] + BetaEr[t + 1][i] - ThetaEr[t][1] <= 0);
			}
		}


		// Refer Inequality 46 - Supplementary material
		///Constraint 4 - for {i in Nc} for {k in K} for {t in T}: -Alpha[t] + Beta[i][t] - Kappa[k][t] - Zeta[i][k][t] <= 0.
		for (int t = 0; t < T; t++) {
			for (int k = 0; k < K; k++) {
				for (int i = 1; i < N; i++) {
					model_sub_er.add(-AlphaEr[t] + BetaEr[t][i] - KappaEr[t][k] - ZetaEr[t][k][i] <= 0);
				}
			}
		}


		// Refer Inequality 47 - Supplementary material
		///Constraint 5 - for {i in Nc} for {t in T}: Beta[i][t] <= penalty[i].
		for (int t = 0; t < T; t++) {
			for (int i = 1; i < N; i++) {
				model_sub_er.add(BetaEr[t][i] <= 0);
			}
		}


		///Constraint 6 - Sum of all duals equal to 1
		IloExpr sumDuals(env);

		// Add AlphaEr[t] 
		for (int t = 0; t < T; t++) {
			sumDuals += AlphaEr[t];
		}

		// Add BetaEr[t][i]
		for (int t = 0; t < T; t++) {
			for (int i = 1; i < N; i++) {
				sumDuals += BetaEr[t][i];
			}
		}

		// Add GammaEr[t]
		for (int t = 1; t < T; t++) {  // starts at 1 if GammaEr[0] isn't used
			sumDuals += GammaEr[t];
		}

		// Add ThetaEr[t][i]
		for (int t = 0; t < T - 1; t++) {
			for (int i = 1; i < N; i++) {
				sumDuals += ThetaEr[t][i];
			}
		}

		// Add DeltaEr[t]
		for (int t = 0; t < T; t++) {
			sumDuals += DeltaEr[t];
		}

		// Add KappaEr[t][k]
		for (int t = 0; t < T; t++) {
			for (int k = 0; k < K; k++) {
				sumDuals += KappaEr[t][k];
			}
		}

		// Add ZetaEr[t][k][i]
		for (int t = 0; t < T; t++) {
			for (int k = 0; k < K; k++) {
				for (int i = 1; i < N; i++) {
					sumDuals += ZetaEr[t][k][i];
				}
			}
		}

		// Add the normalization constraint
		model_sub_er.add(sumDuals == 1);
		sumDuals.end();  // To free the memory



		IloCplex cplex_sub_er(model_sub_er);












/////SOLVING EXTREME RAY PROBLEM/////
			if (cplex_sub.getCplexStatus() == CPX_STAT_UNBOUNDED)
			{
				cout << endl << endl << "SOLVING EXTREME RAY PROBLEM" << endl;

				//Define Objective Function for the Extreme Ray Problem.
				IloExpr sub_obj_er(env);
				// Term 1: -Initial Inventory[0][0] * alpha[1]
				sub_obj_er += -init_inventory[0] * AlphaEr[0];

				// Term 2: sum {i in Nc} (demand[t][i] - Initial Inventory[i][0]) * Beta[t][i]
				for (int i = 1; i < N; i++) {
					sub_obj_er += (demand[1][i] - init_inventory[i]) * BetaEr[1][i];
				}

				// Term 3: sum {i in Nc} sum {t = 2..T} (demand[t][i] * beta[t][i])
				for (int t = 1; t < T; t++) {
					for (int i = 1; i < N; i++) {
						sub_obj_er += demand[t][i] * BetaEr[t][i];
					}
				}

				// Term 4: sum {t in T} (Inventory Capacity[0] * gamma[t])
				for (int t = 0; t < T; t++) {
					sub_obj_er += -inventory_cap[0] * GammaEr[t];
				}

				// Term 5: sum {t in T} sum {i in Nc) (Inventory Capacity[i] - demand[t][i]) * theta[t][i]
				for (int t = 0; t < T; t++) {
					for (int i = 1; i < N; i++) {
						sub_obj_er += -(inventory_cap[i] - demand[t][i]) * ThetaEr[t][i];
					}
				}

				// Term 6: sum {t in T} (-SetM[t] * Y_val[t] * delta[t])
				for (int t = 0; t < T; t++) {
					sub_obj_er += -SetM[t] * Y_val[t] * DeltaEr[t];
				}

				// Term 7: sum {t in T} sum {k in K} (-Q * Z[t][k][0] * kappa[t][k])
				for (int t = 0; t < T; t++) {
					for (int k = 0; k < K; k++) {
						sub_obj_er += -Q * Z_val[t][k][0] * KappaEr[t][k];
					}
				}

				// Term 8: sum {t in T} sum {k in K} sum {i in Nc} (SetN[t][i] * Z[t][k][i] * zeta[t][k][i])
				for (int t = 0; t < T; t++) {
					for (int k = 0; k < K; k++) {
						for (int i = 1; i < N; i++) {
							sub_obj_er += -SetN[t][i] * Z_val[t][k][i] * ZetaEr[t][k][i];
						}
					}
				}

				Objective_sub_er.setExpr(IloMaximize(env, sub_obj_er));
				
				cplex_sub_er.setParam(cplex_sub.PreInd, 0);   //Disable presolve, otherwise, if dual is infeasible,
				//we don't know if prime is unbounded or infeasible
				cplex_sub_er.setParam(IloCplex::RootAlg, IloCplex::Primal);//Solve the SP Dual using Primal Simplex


				cplex_sub_er.solve();
				cout << "Extreme Ray Problem Solution Status: " << cplex_sub_er.getCplexStatus() << endl;

				//cout << "SOLVING EXTREME RAY PROBLEM" << endl;
				// Dual subproblem is unbounded; Hence add feasibility Cut to the Master Problem
				//cplex_sub_er.getValues(X_dual_val_er, X_dual_er);  // taking values of X_dual from SP and saves to X_dual_val
				//cout << "X_dual of extreme rays = " << X_dual_val_er << endl;
				sub_obj_val = cplex_sub_er.getObjValue();
				cout << "extreme_ray_obj_val = " << sub_obj_val << endl;